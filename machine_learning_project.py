# -*- coding: utf-8 -*-
"""Machine Learning Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pw0R8UftSVY8TXC_UQqiYfHivKrvMpjk

#Boston House Pricing
"""

# Commented out IPython magic to ensure Python compatibility.
#Importing the dependencies

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

#Importing the dataset

from google.colab import files
uploaded = files.upload()

df = pd.read_csv('HousingData.csv')

#Checking the top 5 data from the dataset
df.head()

"""#Preparing the Dataset"""

#Checking the information of the dataset
df.info()

df.rename(columns={'MEDV': 'Price'}, inplace=True)

df.isnull().sum()

#Filling the missing values


# Fill continuous columns with median
for col in ['CRIM', 'ZN', 'INDUS', 'AGE', 'LSTAT']:
    df[col] = df[col].fillna(df[col].median())

# Fill CHAS (categorical) with mode
df['CHAS'] = df['CHAS'].fillna(df['CHAS'].mode()[0])

# Check for missing values
print(df.isnull().sum())

"""#Exploratory Data Analysis"""

#Correlation
df.corr()

sns.pairplot(df)

plt.scatter(df['CRIM'],df['Price'])
plt.xlabel("Crime Rate")
plt.ylabel("Price")

plt.scatter(df['RM'],df['Price'])
plt.xlabel("RM")
plt.ylabel("Price")

sns.regplot(x="RM",y="Price",data=df)

sns.regplot(x="LSTAT",y="Price",data=df)

sns.regplot(x="CHAS",y="Price",data=df)

sns.regplot(x="PTRATIO",y="Price",data=df)

"""#Splitting the data into dependent and independent data"""

X = df.drop(columns=["Price"],axis = 1)
y =  df["Price"]

X.head()

y

#Splitting the data into train and test
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=42)

X_train

X_test

"""#Feature Scaling"""

#Standard scaler
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

X_train=scaler.fit_transform(X_train)

X_test=scaler.transform(X_test)

import pickle
pickle.dump(scaler,open('scaling.pkl','wb'))

X_train

X_test

"""#Model Training"""

from sklearn.linear_model import LinearRegression

regression=LinearRegression()

regression.fit(X_train,y_train)

print(regression.coef_)

print(regression.intercept_)

regression.get_params()

reg_pred=regression.predict(X_test)

reg_pred

"""#Assumptions"""

plt.scatter(y_test,reg_pred)

residuals=y_test-reg_pred

residuals

sns.displot(residuals,kind="kde")

plt.scatter(reg_pred,residuals)

from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error

print(mean_absolute_error(y_test,reg_pred))
print(mean_squared_error(y_test,reg_pred))
print(np.sqrt(mean_squared_error(y_test,reg_pred)))

"""#R Square and adjusted r square"""

from sklearn.metrics import r2_score
score=r2_score(y_test,reg_pred)
print(score)

#display adjusted R-squared
1 - (1-score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)

"""#Pickling The Model file For Deployment"""

import pickle

pickle.dump(regression,open('regmodel.pkl','wb'))

pickled_model=pickle.load(open('regmodel.pkl','rb'))

# Predict on a new data point (use X_test for example)
sample = X_test[0].reshape(1, -1)
prediction = pickled_model.predict(sample)
print("Prediction:", prediction)

